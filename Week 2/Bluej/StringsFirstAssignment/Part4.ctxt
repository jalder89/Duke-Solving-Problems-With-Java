#BlueJ class context
comment0.target=Part4
comment0.text=\n\ Write\ a\ description\ of\ class\ Part4\ here.\n\n\ @author\ (your\ name)\n\ @version\ (a\ version\ number\ or\ a\ date)\n\ \n\ Here\ are\ suggestions\ to\ get\ started.\n\n1.\ Create\ a\ new\ Java\ Class\ named\ Part4\ in\ the\ StringsFirstAssignments\ project\ and\ put\ your\ code\ in\ that\ class.\n\n2.\ Use\ URLResource\ to\ read\ the\ file\ at\ http\://www.dukelearntoprogram.com/course2/data/manylinks.html\ word\ by\ word.\n\n3.\ For\ each\ word,\ check\ to\ see\ if\ \u201Cyoutube.com\u201D\ is\ in\ it.\ If\ it\ is,\ find\ the\ double\ quote\ to\ the\ left\ and\ right\ of\ the\ occurrence\ of\ \u201Cyoutube.com\u201D\ \nto\ identify\ the\ beginning\ and\ end\ of\ the\ URL.\ \ Note,\ the\ double\ quotation\ mark\ is\ a\ special\ character\ in\ Java.\ \nTo\ look\ for\ a\ double\ quote,\ look\ for\ (\\\u201D),\ since\ the\ backslash\ (\\)\ character\ indicates\ we\ want\ the\ literal\ quotation\ marks\ (\u201C)\ and\ not\ the\ Java\ character.\ \nThe\ string\ you\ search\ for\ would\ be\ written\ \u201C\\\u201D\u201D\ for\ one\ double\ quotation\ mark.\n\n4.\ In\ addition\ to\ the\ String\ method\ indexOf(x,\ num),\ you\ might\ want\ to\ consider\ using\ the\ String\ method\ lastIndexOf(s,\ num)\ that\ can\ be\ used\ with\ two\ parameters\ s\ and\ num.\ \nThe\ parameter\ s\ is\ the\ string\ or\ character\ \ to\ look\ for,\ \ and\ num\ is\ the\ last\ position\ in\ the\ string\ to\ look\ for\ it.\ \nThis\ method\ returns\ the\ last\ match\ from\ the\ start\ of\ the\ string\ up\ to\ the\ num\ position,\ so\ it\ is\ a\ good\ option\ for\ finding\ the\ opening\ quotation\ mark\ of\ \na\ string\ searching\ backward\ from\ \u201Cyoutube.com.\u201D\ \nMore\ information\ on\ String\ methods\ can\ be\ found\ in\ the\ Java\ documentation\ for\ Strings\:\ http\://docs.oracle.com/javase/7/docs/api/java/lang/String.html.\n\nCaution\:\ The\ word\ Youtube\ could\ appear\ in\ different\ cases\ such\ as\ YouTube,\ youtube,\ or\ YOUTUBE.\ \nYou\ can\ find\ the\ URLs\ more\ easily\ by\ converting\ the\ string\ to\ lowercase.\ \nHowever,\ you\ will\ need\ the\ original\ string\ (with\ uppercase\ and\ lowercase\ letters)\ to\ view\ the\ YouTube\ URL\ to\ answer\ a\ quiz\ question\ because\ YouTube\ links\ are\ case\ sensitive.\ \nThe\ link\ https\://www.youtube.com/watch?v\=ji5_MqicxSo\ \ is\ different\ than\ the\ link\ https\://www.youtube.com/watch?v\=ji5_mqicxso,\ where\ all\ the\ letters\ are\ lowercase.\n\ \n
comment1.params=weblinks
comment1.target=void\ findYoutubeLink(edu.duke.URLResource)
comment2.params=args
comment2.target=void\ main(java.lang.String[])
numComments=3
